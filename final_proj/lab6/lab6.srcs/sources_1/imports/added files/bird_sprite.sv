module bird_no_flap_sprite(
    input [4:0] X,         // 5 bits for 17 columns (0 to 16)
    input [3:0] Y,         // 4 bits for 12 rows (0 to 11)
    output [2:0] pal       // 3-bit pixel output
);
    // 000 means alpha = 0
    // 001 means black
    // 010 means white
    // 011 means yellow
    // 100 means orange
    // 101 means red
    // Other values can represent other colors


    // 17 x 12
    
    parameter [0:11][0:50] ROM = {
        51'b000_000_000_000_000_000_001_001_001_001_001_001_000_000_000_000_000,
        51'b000_000_000_000_001_001_010_010_010_001_010_010_001_000_000_000_000,
        51'b000_000_000_001_010_010_011_011_001_010_010_010_010_001_000_000_000,
        51'b000_001_001_001_001_011_011_011_001_010_010_010_001_010_001_000_000,
        51'b001_010_010_010_010_001_011_011_001_010_010_010_001_010_001_000_000,
        51'b001_010_010_010_010_010_001_011_011_001_010_010_010_010_001_000_000,
        51'b001_011_010_010_010_011_001_011_011_011_001_001_001_001_001_001_000,
        51'b000_001_011_011_011_001_011_011_011_001_101_101_101_101_101_101_001,
        51'b000_000_001_001_001_100_100_100_001_101_001_001_001_001_001_001_000,
        51'b000_000_001_100_100_100_100_100_100_001_101_101_101_101_101_001_000,
        51'b000_000_000_001_001_100_100_100_100_100_001_001_001_001_001_000_000,
        51'b000_000_000_000_000_001_001_001_001_001_000_000_000_000_000_000_000
    };

    logic [50:0] data = ROM[Y];  // Each row is 51 bits wide
    assign pal = data[X*3 +: 3]; // Extract 3 bits for the current pixel

endmodule


module bird_flap_sprite(
    input [4:0] X,         // 5 bits for 17 columns (0 to 16)
    input [3:0] Y,         // 4 bits for 12 rows (0 to 11)
    output [2:0] pal       // 3-bit pixel output
);
    // 000 means alpha = 0
    // 001 means black
    // 010 means white
    // 011 means yellow
    // 100 means orange
    // 101 means red
    // Other values can represent other colors


    // 17 x 12
    
    parameter [0:11][0:50] ROM = {
        51'b000_000_000_000_000_000_001_001_001_001_001_001_000_000_000_000_000,
        51'b000_000_000_000_001_001_010_010_010_001_010_010_001_000_000_000_000,
        51'b000_000_000_001_010_010_011_011_001_010_010_010_010_001_000_000_000,
        51'b000_000_001_010_011_011_011_011_001_010_010_010_001_010_001_000_000,
        51'b000_001_011_011_011_011_011_011_001_010_010_010_001_010_001_000_000,
        51'b000_001_011_011_011_011_011_011_011_001_010_010_010_010_001_000_000,
        51'b000_001_001_001_001_001_011_011_011_011_001_001_001_001_001_001_000,
        51'b001_011_010_010_010_011_001_011_011_001_101_101_101_101_101_101_001,
        51'b001_010_010_010_010_001_100_100_001_101_001_001_001_001_001_001_000,
        51'b001_010_010_011_001_100_100_100_100_001_101_101_101_101_101_001_000,
        51'b000_001_001_001_001_100_100_100_100_100_001_001_001_001_001_000_000,
        51'b000_000_000_000_000_001_001_001_001_001_000_000_000_000_000_000_000
    };

    logic [50:0] data = ROM[Y];  // Each row is 51 bits wide
    assign pal = data[X*3 +: 3]; // Extract 3 bits for the current pixel

endmodule
